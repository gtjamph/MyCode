// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  VDI-VL04-009
// DateTime: 12/05/2018 4:50:22 PM
// UserName: n1408364
// Input file <Parser.y - 15/04/2016 1:22:10 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace ManagedCompiler
{
public enum Tokens {
    error=127,EOF=128,NUMBER=129,IDENT=130,IF=131,ELSE=132,
    INT=133,BOOL=134};

public struct ValueType
#line 9 "Parser.y"
{
    public AST.Expression expr;
	public AST.Statement stmt;
	public AST.Type type;
	public System.Collections.Generic.List<AST.Statement> stmts;
	public int num;
	public char name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 15/04/2016 1:22:10 PM
#line 5 "Parser.y"
public static AST.Statement root;
#line default
  // End verbatim content from Parser.y - 15/04/2016 1:22:10 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[16];
  private static State[] states = new State[30];
  private static string[] nonTerms = new string[] {
      "Expression", "Statement", "Type", "StatementList", "Program", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{131,4,123,11,129,23,130,24,133,28,134,29},new int[]{-5,1,-2,3,-1,15,-3,25});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{40,5});
    states[5] = new State(new int[]{129,23,130,24},new int[]{-1,6});
    states[6] = new State(new int[]{41,7,61,17,43,19,60,21});
    states[7] = new State(new int[]{131,4,123,11,129,23,130,24,133,28,134,29},new int[]{-2,8,-1,15,-3,25});
    states[8] = new State(new int[]{132,9});
    states[9] = new State(new int[]{131,4,123,11,129,23,130,24,133,28,134,29},new int[]{-2,10,-1,15,-3,25});
    states[10] = new State(-3);
    states[11] = new State(-10,new int[]{-4,12});
    states[12] = new State(new int[]{125,13,131,4,123,11,129,23,130,24,133,28,134,29},new int[]{-2,14,-1,15,-3,25});
    states[13] = new State(-4);
    states[14] = new State(-9);
    states[15] = new State(new int[]{59,16,61,17,43,19,60,21});
    states[16] = new State(-5);
    states[17] = new State(new int[]{129,23,130,24},new int[]{-1,18});
    states[18] = new State(new int[]{61,-13,43,19,60,21,59,-13,41,-13});
    states[19] = new State(new int[]{129,23,130,24},new int[]{-1,20});
    states[20] = new State(-14);
    states[21] = new State(new int[]{129,23,130,24},new int[]{-1,22});
    states[22] = new State(new int[]{61,-15,43,19,41,-15,59,-15});
    states[23] = new State(-11);
    states[24] = new State(-12);
    states[25] = new State(new int[]{130,26});
    states[26] = new State(new int[]{59,27});
    states[27] = new State(-6);
    states[28] = new State(-7);
    states[29] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-6, new int[]{-5,128});
    rules[2] = new Rule(-5, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{131,40,-1,41,-2,132,-2});
    rules[4] = new Rule(-2, new int[]{123,-4,125});
    rules[5] = new Rule(-2, new int[]{-1,59});
    rules[6] = new Rule(-2, new int[]{-3,130,59});
    rules[7] = new Rule(-3, new int[]{133});
    rules[8] = new Rule(-3, new int[]{134});
    rules[9] = new Rule(-4, new int[]{-4,-2});
    rules[10] = new Rule(-4, new int[]{});
    rules[11] = new Rule(-1, new int[]{129});
    rules[12] = new Rule(-1, new int[]{130});
    rules[13] = new Rule(-1, new int[]{-1,61,-1});
    rules[14] = new Rule(-1, new int[]{-1,43,-1});
    rules[15] = new Rule(-1, new int[]{-1,60,-1});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> Statement
#line 33 "Parser.y"
                              { root = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 3: // Statement -> IF, '(', Expression, ')', Statement, ELSE, Statement
#line 36 "Parser.y"
                                                           { CurrentSemanticValue.stmt = new AST.IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 4: // Statement -> '{', StatementList, '}'
#line 37 "Parser.y"
                                        { CurrentSemanticValue.stmt = new AST.CompoundStatement(ValueStack[ValueStack.Depth-2].stmts);   }
#line default
        break;
      case 5: // Statement -> Expression, ';'
#line 38 "Parser.y"
                             { CurrentSemanticValue.stmt = new AST.ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 6: // Statement -> Type, IDENT, ';'
#line 39 "Parser.y"
                             { CurrentSemanticValue.stmt = new AST.VariableDeclaration(ValueStack[ValueStack.Depth-3].type,ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 7: // Type -> INT
#line 42 "Parser.y"
                       { CurrentSemanticValue.type = new AST.IntType(); }
#line default
        break;
      case 8: // Type -> BOOL
#line 43 "Parser.y"
                        { CurrentSemanticValue.type = new AST.BoolType(); }
#line default
        break;
      case 9: // StatementList -> StatementList, Statement
#line 46 "Parser.y"
                                                { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt);    }
#line default
        break;
      case 10: // StatementList -> /* empty */
#line 47 "Parser.y"
                                    { CurrentSemanticValue.stmts = new System.Collections.Generic.List<AST.Statement>(); }
#line default
        break;
      case 11: // Expression -> NUMBER
#line 50 "Parser.y"
                              { CurrentSemanticValue.expr = new AST.NumberExpression(ValueStack[ValueStack.Depth-1].num);         }
#line default
        break;
      case 12: // Expression -> IDENT
#line 51 "Parser.y"
                             { CurrentSemanticValue.expr = new AST.IdentifierExpression(ValueStack[ValueStack.Depth-1].name);     }
#line default
        break;
      case 13: // Expression -> Expression, '=', Expression
#line 52 "Parser.y"
                                      { CurrentSemanticValue.expr = new AST.AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 14: // Expression -> Expression, '+', Expression
#line 53 "Parser.y"
                                      { CurrentSemanticValue.expr = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expr,'+',ValueStack[ValueStack.Depth-1].expr);  }
#line default
        break;
      case 15: // Expression -> Expression, '<', Expression
#line 54 "Parser.y"
                                      { CurrentSemanticValue.expr = new AST.BinaryExpression(ValueStack[ValueStack.Depth-3].expr,'<',ValueStack[ValueStack.Depth-1].expr);  }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 58 "Parser.y"

int yywrap()
{
    return 1;
}

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
